{"version":3,"sources":["Caeser.js","Vigenere.js","App.js","index.js"],"names":["ascii","char","charCodeAt","substitute","text","sequence","chars","strip","toUpperCase","i","length","push","join","str","replace","Caeser","encrypt","plaintext","shiftAmount","String","fromCharCode","decrypt","ciphertext","Array","standardFrequency","A","B","C","D","E","F","G","H","I","J","K","L","M","N","O","P","Q","R","S","T","U","V","W","X","Y","Z","chr","circularShiftLeft","array","shift","getFrequencyTable","charCount","charFrequency","indexOfCoincidence","frequencyTable","c","idx","divide","numGroups","groups","bestCaeserShift","bestShiftAmount","index","difference","bestDifference","Number","MAX_VALUE","Math","abs","Vigenere","key","plainChar","cipherChars","console","log","split","cipherChar","plainChars","crack","maxKeyLength","keyLen","groupIndex","group","info","plaintexts","totalDifference","overall","charAt","sort","a","b","App","Container","fluid","Form","className","Button","variant","onClick","document","getElementById","value","Group","controlId","Control","as","rows","id","charset","floor","random","InputGroup","FormControl","placeholder","aria-label","aria-describedby","Append","encrypted","Label","decrypted","style","display","innerHTML","cracked","list","li","createElement","appendChild","ListGroup","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.c5567534.chunk.js","sourcesContent":["const ascii = (char) => {\r\n  return char.charCodeAt(0);\r\n};\r\n\r\nconst substitute = (text, sequence) => {\r\n  var chars = [];\r\n\r\n  text = strip(text).toUpperCase();\r\n  for (let i = 0; i < text.length; ++i) {\r\n    chars.push(sequence[text.charCodeAt(i) - ascii(\"A\")]);\r\n  }\r\n\r\n  return chars.join(\"\");\r\n};\r\n\r\nconst strip = (str) => {\r\n  return str.replace(/\\s+/g, \"\");\r\n};\r\n\r\nconst Caeser = {\r\n  encrypt: (plaintext, shiftAmount) => {\r\n    var sequence = [];\r\n    for (let i = 0; i < 26; ++i) {\r\n      sequence.push(String.fromCharCode(ascii(\"A\") + ((shiftAmount + i) % 26)));\r\n    }\r\n\r\n    return substitute(plaintext, sequence);\r\n  },\r\n\r\n  decrypt: (ciphertext, shiftAmount) => {\r\n    var sequence = new Array(26);\r\n    for (let i = 0; i < 26; ++i) {\r\n      sequence[(shiftAmount + i) % 26] = String.fromCharCode(ascii(\"A\") + i);\r\n    }\r\n\r\n    return substitute(ciphertext, sequence);\r\n  },\r\n};\r\n\r\nexport default Caeser;\r\n","import Caeser from \"./Caeser\";\r\n\r\nconst standardFrequency = {\r\n  A: 0.082,\r\n  B: 0.015,\r\n  C: 0.028,\r\n  D: 0.043,\r\n  E: 0.127,\r\n  F: 0.022,\r\n  G: 0.02,\r\n  H: 0.061,\r\n  I: 0.07,\r\n  J: 0.002,\r\n  K: 0.008,\r\n  L: 0.04,\r\n  M: 0.024,\r\n  N: 0.067,\r\n  O: 0.075,\r\n  P: 0.019,\r\n  Q: 0.001,\r\n  R: 0.06,\r\n  S: 0.063,\r\n  T: 0.091,\r\n  U: 0.028,\r\n  V: 0.01,\r\n  W: 0.023,\r\n  X: 0.001,\r\n  Y: 0.02,\r\n  Z: 0.001,\r\n};\r\n\r\n/* const strip = (str) => {\r\n  return str.replace(/\\s+/g, \"\");\r\n}; */\r\n\r\nconst ascii = (char) => {\r\n  return char.charCodeAt(0);\r\n};\r\n\r\nconst chr = (ascii) => {\r\n  return String.fromCharCode(ascii);\r\n};\r\n\r\nconst circularShiftLeft = (array) => {\r\n  array.push(array.shift());\r\n};\r\n\r\nconst getFrequencyTable = (str) => {\r\n  var i, charCount, charFrequency;\r\n  charCount = {};\r\n  for (i = 0; i < 26; ++i) {\r\n    charCount[chr(i + ascii(\"A\"))] = 0;\r\n  }\r\n  for (i = 0; i < str.length; ++i) {\r\n    ++charCount[str[i]];\r\n  }\r\n  charFrequency = {};\r\n  for (i = 0; i < 26; ++i) {\r\n    charFrequency[chr(i + ascii(\"A\"))] =\r\n      charCount[chr(i + ascii(\"A\"))] / str.length;\r\n  }\r\n\r\n  return charFrequency;\r\n};\r\n\r\nconst indexOfCoincidence = (frequencyTable) => {\r\n  var i, c, idx;\r\n  idx = 0;\r\n  for (i = 0; i < 26; ++i) {\r\n    c = chr(i + ascii(\"A\"));\r\n    idx += frequencyTable[c] * standardFrequency[c];\r\n  }\r\n\r\n  return idx;\r\n};\r\n\r\nconst divide = (str, numGroups) => {\r\n  var i, groups;\r\n\r\n  groups = [];\r\n  for (i = 0; i < numGroups; ++i) {\r\n    groups.push([]);\r\n  }\r\n  for (i = 0; i < str.length; ++i) {\r\n    groups[i % numGroups].push(str[i]);\r\n  }\r\n  for (i = 0; i < numGroups; ++i) {\r\n    groups[i] = groups[i].join(\"\");\r\n  }\r\n\r\n  return groups;\r\n};\r\n\r\nfunction bestCaeserShift(ciphertext) {\r\n  var plaintext,\r\n    shiftAmount,\r\n    bestShiftAmount,\r\n    index,\r\n    difference,\r\n    bestDifference;\r\n\r\n  bestShiftAmount = 0;\r\n  bestDifference = Number.MAX_VALUE;\r\n  for (shiftAmount = 0; shiftAmount < 26; ++shiftAmount) {\r\n    plaintext = Caeser.decrypt(ciphertext, shiftAmount);\r\n    index = indexOfCoincidence(getFrequencyTable(plaintext));\r\n    difference = Math.abs(index - 0.065);\r\n    if (difference < bestDifference) {\r\n      bestDifference = difference;\r\n      bestShiftAmount = shiftAmount;\r\n    }\r\n  }\r\n\r\n  return [bestShiftAmount, bestDifference];\r\n}\r\n\r\nconst Vigenere = {\r\n  encrypt: (plaintext, key) => {\r\n    var i, plainChar, shiftAmount, cipherChars;\r\n\r\n    plaintext = plaintext.toUpperCase();\r\n    console.log(plaintext);\r\n    key = key.toUpperCase().split(\"\");\r\n    cipherChars = [];\r\n    for (i = 0; (plainChar = plaintext[i]); ++i) {\r\n      if (ascii(plainChar) === 32) {\r\n        cipherChars.push(\" \");\r\n      } else {\r\n        shiftAmount = ascii(key[0]) - ascii(\"A\");\r\n        cipherChars.push(Caeser.encrypt(plainChar, shiftAmount));\r\n      }\r\n      circularShiftLeft(key);\r\n    }\r\n    return cipherChars.join(\"\");\r\n  },\r\n\r\n  decrypt: (ciphertext, key) => {\r\n    var i, cipherChar, shiftAmount, plainChars;\r\n\r\n    ciphertext = ciphertext.toUpperCase();\r\n    key = key.toUpperCase().split(\"\");\r\n\r\n    plainChars = [];\r\n    for (i = 0; (cipherChar = ciphertext[i]); ++i) {\r\n      if (ascii(cipherChar) === 32) {\r\n        plainChars.push(\" \");\r\n      } else {\r\n        shiftAmount = ascii(key[0]) - ascii(\"A\");\r\n        plainChars.push(Caeser.decrypt(cipherChar, shiftAmount));\r\n      }\r\n      circularShiftLeft(key);\r\n    }\r\n\r\n    return plainChars.join(\"\");\r\n  },\r\n\r\n  crack: (ciphertext, maxKeyLength) => {\r\n    var i,\r\n      keyLen,\r\n      groups,\r\n      groupIndex,\r\n      group,\r\n      info,\r\n      plaintexts,\r\n      shiftAmount,\r\n      difference,\r\n      totalDifference,\r\n      overall;\r\n    overall = [];\r\n\r\n    for (keyLen = 1; keyLen <= maxKeyLength; ++keyLen) {\r\n      groups = divide(ciphertext, keyLen);\r\n\r\n      totalDifference = 0;\r\n      plaintexts = [];\r\n      for (groupIndex = 0; groupIndex < groups.length; ++groupIndex) {\r\n        group = groups[groupIndex];\r\n        info = bestCaeserShift(group);\r\n        shiftAmount = info[0];\r\n        difference = info[1];\r\n\r\n        totalDifference += difference;\r\n        plaintexts.push(Caeser.decrypt(group, shiftAmount));\r\n      }\r\n\r\n      let plaintext = [];\r\n      for (i = 0; i < ciphertext.length; ++i) {\r\n        plaintext.push(plaintexts[i % keyLen].charAt(i / keyLen));\r\n      }\r\n      plaintext = plaintext.join(\"\");\r\n\r\n      overall.push([totalDifference, plaintext]);\r\n    }\r\n\r\n    overall.sort(function (a, b) {\r\n      return a[0] < b[0];\r\n    });\r\n\r\n    return overall;\r\n  },\r\n};\r\n\r\nexport default Vigenere;\r\n","import React from \"react\";\nimport {\n  Container,\n  Form,\n  Button,\n  InputGroup,\n  FormControl,\n  ListGroup,\n} from \"react-bootstrap\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport Vigenere from \"./Vigenere\";\n\nconst App = () => {\n  const randomKey = () => {\n    var size = 6;\n    var charset = \"abcdefghijklmnopqrstuvwxyz\";\n    var key = \"\";\n    for (var i = 0; i < size; i++) {\n      key += charset[Math.floor(Math.random() * charset.length)];\n    }\n\n    document.getElementById(\"key\").value = key;\n  };\n\n  const sampleText = () => {\n    const text =\n      \"It was the wont of the immortal gods sometimes to grant prosperity and long impunity to men whose crimes they were minded to punish in order that a complete reverse of fortune might make them suffer more bitterly\";\n    document.getElementById(\"text\").value = text;\n  };\n\n  const encrypt = () => {\n    const key = document.getElementById(\"key\").value;\n    const value = document.getElementById(\"text\").value;\n    const encrypted = Vigenere.encrypt(value, key);\n    document.getElementById(\"encrypted\").value = encrypted;\n  };\n\n  const decrypt = () => {\n    const key = document.getElementById(\"key\").value;\n    const value = document.getElementById(\"encrypted\").value;\n    const decrypted = Vigenere.decrypt(value, key);\n    document.getElementById(\"decrypted\").style.display = \"block\";\n    document.getElementById(\"label\").style.display = \"block\";\n    document.getElementById(\"decrypted\").innerHTML = decrypted;\n  };\n\n  const crack = () => {\n    const value = document.getElementById(\"encrypted\").value;\n    const cracked = Vigenere.crack(value, 10);\n    document.getElementById(\"crack-label\").style.display = \"block\";\n    let list = document.getElementById(\"crack\");\n    for (let i = 0; i < cracked.length; ++i) {\n      let li = document.createElement(\"ListGroup.Item\");\n      li.innerHTML = cracked[i][1];\n      list.appendChild(li);\n    }\n  };\n  return (\n    <Container fluid>\n      <Form className=\"mt-5\">\n        <Button variant=\"outline-primary\" onClick={sampleText}>\n          Sample Text\n        </Button>\n        <Form.Group controlId=\"exampleForm.ControlInput1\" className=\"mt-3\">\n          <Form.Group controlId=\"exampleForm.ControlTextarea1\">\n            <Form.Control as=\"textarea\" rows=\"5\" id=\"text\" />\n          </Form.Group>\n        </Form.Group>\n        <Form.Group controlId=\"exampleForm.ControlSelect1\">\n          <Button variant=\"outline-success\" onClick={randomKey}>\n            Generate Random Key\n          </Button>\n          <InputGroup className=\"mb-3 mt-3\">\n            <FormControl\n              placeholder=\"Encryption Key\"\n              aria-label=\"Encryption Key\"\n              aria-describedby=\"basic-addon2\"\n              id=\"key\"\n            />\n            <InputGroup.Append>\n              <Button variant=\"outline-secondary\" onClick={encrypt}>\n                Encrypt\n              </Button>\n            </InputGroup.Append>\n          </InputGroup>\n        </Form.Group>\n        <Form.Group controlId=\"exampleForm.ControlSelect2\">\n          <Form.Label>Cipher Text</Form.Label>\n          <Form.Control as=\"textarea\" rows=\"5\" id=\"encrypted\" />\n        </Form.Group>\n        <Button variant=\"outline-primary\" onClick={decrypt}>\n          Decrypt\n        </Button>{\" \"}\n        {\"   \"}\n        <Button variant=\"outline-success\" onClick={crack}>\n          Crack\n        </Button>\n        <Form.Label id=\"label\" className=\"mt-3\" style={{ display: \"none\" }}>\n          Decrypted Text\n        </Form.Label>\n        <Form.Control\n          as=\"textarea\"\n          rows=\"5\"\n          id=\"decrypted\"\n          className=\"mt-3\"\n          style={{ display: \"none\" }}\n        />\n        <Form.Label\n          id=\"crack-label\"\n          className=\"mt-3\"\n          style={{ display: \"none\" }}\n        >\n          Crack Text\n        </Form.Label>\n        <ListGroup id=\"crack\" style={{ display: \"inlineBlock\" }}></ListGroup>\n      </Form>\n    </Container>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}